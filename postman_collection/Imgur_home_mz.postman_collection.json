{
	"info": {
		"_postman_id": "f4b80aa6-02e0-4fcf-8ee1-625d1cf75508",
		"name": "Imgur_home_mz",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Account_info",
			"item": [
				{
					"name": "Account Base",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}"
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/account/{{username}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"account",
								"{{username}}"
							]
						},
						"description": "Request standard user information. If you need the username for the account that is logged in, it is returned in the request for an [access token](/account/current_account). Note: This endpoint also supports the ability to lookup account base info by account ID. To do so, pass the query parameter `account_id`.\n\n#### Response Model: [Account](https://api.imgur.com/models/account)"
					},
					"response": [
						{
							"name": "Sample Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}"
									}
								],
								"url": {
									"raw": "https://api.imgur.com/3/account/{{username}}",
									"protocol": "https",
									"host": [
										"api",
										"imgur",
										"com"
									],
									"path": [
										"3",
										"account",
										"{{username}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Accept-Ranges",
									"value": "bytes",
									"name": "Accept-Ranges",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Age",
									"value": "0",
									"name": "Age",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Wed, 31 May 2017 14:56:02 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"42f114046cd3f43be6995f2566c8ebb31f9dd21a\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Server",
									"value": "cat factory 1.0",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Backstage",
									"value": "110",
									"name": "X-Backstage",
									"description": ""
								},
								{
									"key": "X-Cache",
									"value": "MISS",
									"name": "X-Cache",
									"description": ""
								},
								{
									"key": "X-Cache-Hits",
									"value": "0",
									"name": "X-Cache-Hits",
									"description": ""
								},
								{
									"key": "X-Frame-Options",
									"value": "DENY",
									"name": "X-Frame-Options",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientLimit",
									"value": "12500",
									"name": "X-RateLimit-ClientLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-ClientRemaining",
									"value": "12500",
									"name": "X-RateLimit-ClientRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserLimit",
									"value": "500",
									"name": "X-RateLimit-UserLimit",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserRemaining",
									"value": "499",
									"name": "X-RateLimit-UserRemaining",
									"description": ""
								},
								{
									"key": "X-RateLimit-UserReset",
									"value": "1496246162",
									"name": "X-RateLimit-UserReset",
									"description": ""
								},
								{
									"key": "X-Redux",
									"value": "1",
									"name": "X-Redux",
									"description": ""
								},
								{
									"key": "X-Served-By",
									"value": "cache-iad2621-IAD",
									"name": "X-Served-By",
									"description": ""
								},
								{
									"key": "X-Timer",
									"value": "S1496242562.109182,VS0,VE30",
									"name": "X-Timer",
									"description": ""
								},
								{
									"key": "access-control-allow-headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, sessionCount, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "access-control-allow-headers",
									"description": ""
								},
								{
									"key": "access-control-allow-methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "access-control-allow-methods",
									"description": ""
								},
								{
									"key": "access-control-allow-origin",
									"value": "*",
									"name": "access-control-allow-origin",
									"description": ""
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "a8af9726c6c741c5694e2164c15d1bdc",
									"key": "IMGURSESSION"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "1",
									"key": "_nc"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "110",
									"key": "backstage"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "898d560972119ade98fdae2cc4313b0b%7EqnBR5g7CRpOGxrTXiaBYk1zqRz2O9165",
									"key": "authautologin"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "upload.i-086fcbff9142dde07.production",
									"key": "UPSERVERID"
								}
							],
							"body": "{\"data\":{\"id\":48437714,\"url\":\"ghostinspector\",\"bio\":null,\"avatar\":null,\"reputation\":0,\"reputation_name\":\"Neutral\",\"created\":1481839668,\"pro_expiration\":false,\"user_follow\":{\"status\":false}},\"success\":true,\"status\":200}"
						}
					]
				}
			]
		},
		{
			"name": "Albums",
			"item": [
				{
					"name": "Album Count (Un-Authed / Authed) Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = JSON.parse(responseBody);\r",
									"\r",
									"var countAlbumsBeaforeTest = res.data;\r",
									"\r",
									"pm.environment.set(\"albumCount\", countAlbumsBeaforeTest);\r",
									"\r",
									"tests['success request'] = res.success === true;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/account/{{username}}/albums/count",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"account",
								"{{username}}",
								"albums",
								"count"
							]
						},
						"description": "Return the total number of albums associated with the account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				},
				{
					"name": "Album Creation (Un-Authed / Authed) En_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"//postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var albumHashEn = res.data.id;",
									"var albumDeleteHashEn = res.data.deletehash;",
									"",
									"//tests['Returns 7 char alphanumeric album id'] = /^[a-z0-9]{5}$/i.test(albumHashToDelete);",
									"//tests['Returns 15 char alhpanumeric album deletehash'] = /^[a-z0-9]{15}$/i.test(albumDeleteHash);",
									"",
									"postman.setEnvironmentVariable('albumHashEn', albumHashEn);",
									"postman.setEnvironmentVariable('albumDeleteHashEn', albumDeleteHashEn);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"",
									"//postman.setNextRequest('Share with Community (Album)'); // Gallery -> Share with Community (Album)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}",
								"description": "Use this header if performing this action anonymously.",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": "Use this header if performing this action as a logged-in user."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids[]",
									"value": "{{imageHash}}",
									"description": "The image ids that you want to be included in the album.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ids[]",
									"value": "{{imageHash2}}",
									"description": "any additional image ids...",
									"type": "text",
									"disabled": true
								},
								{
									"key": "deletehashes[]",
									"value": "{{deleteHash}}",
									"description": "The deletehashes of the images that you want to be included in the album.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "deletehashes[]",
									"value": "{{deleteHash2}}",
									"description": "any additional deletehashes...",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "test_album_api1",
									"description": "The title of the album",
									"type": "text"
								},
								{
									"key": "description",
									"value": "This albums contains a lot of dank memes. Be prepared.",
									"description": "The description of the album",
									"type": "text"
								},
								{
									"key": "privacy",
									"value": "public",
									"description": "Sets the privacy level of the album. Values are : public | hidden | secret. Defaults to user's privacy settings for logged in users.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cover",
									"value": "{{imageHash}}",
									"description": "The ID of an image that you want to be the cover of the album",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/album",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"album"
							]
						},
						"description": "Create a new album. Optional parameter of `ids[]` is an array of image ids to add to the album. If uploading anonymous images to an anonymous album please use the optional parameter of `deletehashes[]` rather than `ids[]`. Note: including the optional `deletehashes[]` parameter will also work for authenticated user albums. There is no need to duplicate image ids with their corresponding deletehash.\n\nThis method is available without authenticating an account, and may be used merely by sending \"Authorization: Client-ID {client_id}\" in the request headers. Doing so will create an anonymous album which is not tied to an account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key            | Required | Description                                                                                                                          |\n|----------------|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| ids[]          | optional | The image ids that you want to be included in the album.                                                                             |\n| deletehashes[] | optional | The deletehashes of the images that you want to be included in the album.                                                            |\n| title          | optional | The title of the album                                                                                                               |\n| description    | optional | The description of the album                                                                                                         |\n| privacy        | optional | Sets the privacy level of the album. Values are : `public` &#124; `hidden` &#124; secret. Defaults to user's privacy settings for logged in users. |\n| layout         | optional | (_deprecated_) Sets the layout to display the album. Values are : `blog` &#124; `grid` &#124; `horizontal` &#124; `vertical`                                               |\n| cover          | optional | The ID of an image that you want to be the cover of the album                                                                        |"
					},
					"response": []
				},
				{
					"name": "Update Album name/description(Un-Authed / Authed) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"\r",
									"tests['Status code is 200'] = (responseCode.code === 200);\r",
									"tests['Album deletion was successful'] = res.success === true && res.data === true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}",
								"description": "Use this header if performing this action anonymously.",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": "Use this header if performing this action as a logged-in user."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids[]",
									"value": "{{imageHash}}",
									"description": "Optional. The image ids that you want to be included in the album.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ids[]",
									"value": "{{image2Hash}}",
									"description": "any additional image ids...",
									"type": "text",
									"disabled": true
								},
								{
									"key": "deletehashes",
									"value": "{{deleteHash}}",
									"description": "Optional. The deletehashes of the images that you want to be included in the album.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "UpdatetedAlbumName",
									"description": "Optional. The title of the album",
									"type": "text"
								},
								{
									"key": "description",
									"value": "This description was updated",
									"description": "Optional. The description of the album",
									"type": "text"
								},
								{
									"key": "privacy",
									"value": "public",
									"description": "Optional. Sets the privacy level of the album. Values are : `public` | `hidden` | `secret`. Defaults to user's privacy settings for logged in users.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cover",
									"value": "{{imageHash}}",
									"description": "Optional. The ID of an image that you want to be the cover of the album",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/album/{{albumHashEn}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"album",
								"{{albumHashEn}}"
							]
						},
						"description": "Update the information of an album. For anonymous albums, `albumHash` should be the deletehash that is returned at creation.\n\nIf uploading anonymous images to an anonymous album please use the optional parameter of `deletehashes[]` rather than `ids[]`. Note: including the optional `deletehashes[]` parameter will also work for authenticated user albums. There is no need to duplicate image ids with their corresponding deletehash.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key            | Required | Description                                                                                                                          |\n|----------------|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| ids[]          | optional | The image ids that you want to be included in the album.                                                                             |\n| deletehashes[] | optional | The deletehashes of the images that you want to be included in the album.                                                            |\n| title          | optional | The title of the album                                                                                                               |\n| description    | optional | The description of the album                                                                                                         |\n| privacy        | optional | Sets the privacy level of the album. Values are : `public` &#124; `hidden` &#124; secret. Defaults to user's privacy settings for logged in users. |\n| layout         | optional | (_deprecated_) Sets the layout to display the album. Values are : `blog` &#124; `grid` &#124; `horizontal` &#124; `vertical`                                               |\n| cover          | optional | The ID of an image that you want to be the cover of the album                                                                        |"
					},
					"response": []
				},
				{
					"name": "Album Creation (Un-Authed / Authed) Ru_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var albumHashRu = res.data.id;",
									"var albumDeleteHashRu = res.data.deletehash;",
									"",
									"//tests['Returns 7 char alphanumeric album id'] = /^[a-z0-9]{5}$/i.test(albumHash);",
									"// tests['Returns 15 char alhpanumeric album deletehash'] = /^[a-z0-9]{15}$/i.test(albumDeleteHash);",
									"",
									"postman.setEnvironmentVariable('albumHashRu', albumHashRu);",
									"postman.setEnvironmentVariable('albumDeleteHashRu', albumDeleteHashRu);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}",
								"description": "Use this header if performing this action anonymously.",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": "Use this header if performing this action as a logged-in user."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids[]",
									"value": "{{imageHash}}",
									"description": "The image ids that you want to be included in the album.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ids[]",
									"value": "{{imageHash2}}",
									"description": "any additional image ids...",
									"type": "text",
									"disabled": true
								},
								{
									"key": "deletehashes[]",
									"value": "{{deleteHash}}",
									"description": "The deletehashes of the images that you want to be included in the album.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "deletehashes[]",
									"value": "{{deleteHash2}}",
									"description": "any additional deletehashes...",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "Мой любимый альбом",
									"description": "The title of the album",
									"type": "text"
								},
								{
									"key": "description",
									"value": "This albums contains a lot of dank memes. Be prepared.",
									"description": "The description of the album",
									"type": "text"
								},
								{
									"key": "privacy",
									"value": "public",
									"description": "Sets the privacy level of the album. Values are : public | hidden | secret. Defaults to user's privacy settings for logged in users.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cover",
									"value": "{{imageHash}}",
									"description": "The ID of an image that you want to be the cover of the album",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/album",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"album"
							]
						},
						"description": "Create a new album. Optional parameter of `ids[]` is an array of image ids to add to the album. If uploading anonymous images to an anonymous album please use the optional parameter of `deletehashes[]` rather than `ids[]`. Note: including the optional `deletehashes[]` parameter will also work for authenticated user albums. There is no need to duplicate image ids with their corresponding deletehash.\n\nThis method is available without authenticating an account, and may be used merely by sending \"Authorization: Client-ID {client_id}\" in the request headers. Doing so will create an anonymous album which is not tied to an account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key            | Required | Description                                                                                                                          |\n|----------------|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| ids[]          | optional | The image ids that you want to be included in the album.                                                                             |\n| deletehashes[] | optional | The deletehashes of the images that you want to be included in the album.                                                            |\n| title          | optional | The title of the album                                                                                                               |\n| description    | optional | The description of the album                                                                                                         |\n| privacy        | optional | Sets the privacy level of the album. Values are : `public` &#124; `hidden` &#124; secret. Defaults to user's privacy settings for logged in users. |\n| layout         | optional | (_deprecated_) Sets the layout to display the album. Values are : `blog` &#124; `grid` &#124; `horizontal` &#124; `vertical`                                               |\n| cover          | optional | The ID of an image that you want to be the cover of the album                                                                        |"
					},
					"response": []
				},
				{
					"name": "Album Creation (Un-Authed / Authed) special_symbols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var albumHashSymbol = res.data.id;",
									"var albumDeleteHashSymbol = res.data.deletehash;",
									"",
									"postman.setEnvironmentVariable('albumHashSymbol', albumHashSymbol);",
									"postman.setEnvironmentVariable('albumDeleteHashSymbol', albumDeleteHashSymbol);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}",
								"description": "Use this header if performing this action anonymously.",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"description": "Use this header if performing this action as a logged-in user."
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids[]",
									"value": "{{imageHash}}",
									"description": "The image ids that you want to be included in the album.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "ids[]",
									"value": "{{imageHash2}}",
									"description": "any additional image ids...",
									"type": "text",
									"disabled": true
								},
								{
									"key": "deletehashes[]",
									"value": "{{deleteHash}}",
									"description": "The deletehashes of the images that you want to be included in the album.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "deletehashes[]",
									"value": "{{deleteHash2}}",
									"description": "any additional deletehashes...",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "spec_sympol_album%@#",
									"description": "The title of the album",
									"type": "text"
								},
								{
									"key": "description",
									"value": "This albums contains a lot of dank memes. Be prepared.",
									"description": "The description of the album",
									"type": "text"
								},
								{
									"key": "privacy",
									"value": "public",
									"description": "Sets the privacy level of the album. Values are : public | hidden | secret. Defaults to user's privacy settings for logged in users.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cover",
									"value": "{{imageHash}}",
									"description": "The ID of an image that you want to be the cover of the album",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/album",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"album"
							]
						},
						"description": "Create a new album. Optional parameter of `ids[]` is an array of image ids to add to the album. If uploading anonymous images to an anonymous album please use the optional parameter of `deletehashes[]` rather than `ids[]`. Note: including the optional `deletehashes[]` parameter will also work for authenticated user albums. There is no need to duplicate image ids with their corresponding deletehash.\n\nThis method is available without authenticating an account, and may be used merely by sending \"Authorization: Client-ID {client_id}\" in the request headers. Doing so will create an anonymous album which is not tied to an account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key            | Required | Description                                                                                                                          |\n|----------------|----------|--------------------------------------------------------------------------------------------------------------------------------------|\n| ids[]          | optional | The image ids that you want to be included in the album.                                                                             |\n| deletehashes[] | optional | The deletehashes of the images that you want to be included in the album.                                                            |\n| title          | optional | The title of the album                                                                                                               |\n| description    | optional | The description of the album                                                                                                         |\n| privacy        | optional | Sets the privacy level of the album. Values are : `public` &#124; `hidden` &#124; secret. Defaults to user's privacy settings for logged in users. |\n| layout         | optional | (_deprecated_) Sets the layout to display the album. Values are : `blog` &#124; `grid` &#124; `horizontal` &#124; `vertical`                                               |\n| cover          | optional | The ID of an image that you want to be the cover of the album                                                                        |"
					},
					"response": []
				},
				{
					"name": "Album Count (Un-Authed / Authed) Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"\r",
									"var countAlbumsAfterTest = res.data;\r",
									"\r",
									"pm.environment.set(\"albumCountUpdate\", countAlbumsAfterTest);\r",
									"\r",
									"var countOld = pm.variables.get(\"albumCount\");\r",
									"var countNew = pm.variables.get(\"albumCountUpdate\");\r",
									"\r",
									"tests['success request'] = res.success === true;\r",
									"tests['albums count'] =  countOld === countNew-3;\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/account/{{username}}/albums/count",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"account",
								"{{username}}",
								"albums",
								"count"
							]
						},
						"description": "Return the total number of albums associated with the account.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				},
				{
					"name": "Albums (Un-Authed / Authed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"\r",
									"tests['Album info receiving was successful'] = res.success === true && res.status === 200;\r",
									"\r",
									"tests['Status code is 200'] = (responseCode.code === 200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/account/{{username}}/albums/",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"account",
								"{{username}}",
								"albums",
								""
							]
						},
						"description": "Get all the albums associated with the account. Must be logged in as the user to see secret and hidden albums.\n\n#### Response Model: [Album](https://api.imgur.com/models/album)\n\n#### Parameters\n| Key  | Required | Description                                                                                     |\n|------|----------|-------------------------------------------------------------------------------------------------|\n| page | optional | integer - allows you to set the page number so you don't have to retrieve all the data at once. |"
					},
					"response": []
				},
				{
					"name": "Album IDs (Un-Authed / Authed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"\r",
									"tests['Album IDs receiving was successful'] = res.success === true && res.status === 200;\r",
									"\r",
									"tests['Status code is 200'] = (responseCode.code === 200);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/account/{{username}}/albums/ids/",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"account",
								"{{username}}",
								"albums",
								"ids",
								""
							]
						},
						"description": "Return an array of all of the album IDs (hashes).\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				},
				{
					"name": "Album Deletion (Un-Authed) En_album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = JSON.parse(responseBody);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"tests['data is true'] = res.data === true;\r",
									"tests['status is true'] = res.success === true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}"
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/album/{{albumDeleteHashEn}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"album",
								"{{albumDeleteHashEn}}"
							]
						},
						"description": "Delete an album with a given deletehash.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				},
				{
					"name": "Album Deletion (Authed)  Ru_album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"//postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Album deletion was successful'] = res.success === true && res.data === true;",
									"",
									"//postman.setNextRequest('Image Deletion (Authed)'); // Image -> Image Deletion (Authed)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://api.imgur.com/3/album/{{albumHashRu}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"album",
								"{{albumHashRu}}"
							]
						},
						"description": "Delete an album with a given ID. You are required to be logged in as the user to delete the album.\n\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				},
				{
					"name": "Album Deletion (Authed)  Symbol_album",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"//postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Album deletion was successful'] = res.success === true && res.data === true;",
									"",
									"//postman.setNextRequest('Image Deletion (Authed)'); // Image -> Image Deletion (Authed)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "https://api.imgur.com/3/album/{{albumHashSymbol}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"album",
								"{{albumHashSymbol}}"
							]
						},
						"description": "Delete an album with a given ID. You are required to be logged in as the user to delete the album.\n\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "scope",
						"value": "",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "a543220c4991282d7764eaed80d207a80b78f0d5",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "3412b1895eff6a8",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "https://api.imgur.com/oauth2/token",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "https://api.imgur.com/oauth2/authorize",
						"type": "string"
					},
					{
						"key": "redirect_uri",
						"value": "https://www.getpostman.com/oauth2/callback",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "authorization_code",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "imgur_token_mz",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					},
					{
						"key": "useBrowser",
						"value": false,
						"type": "boolean"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Images",
			"item": [
				{
					"name": "Image Upload 1_sample",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"//postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var imageHash1 = res.data.id;",
									"var imageDeleteHash = res.data.deletehash;",
									"tests['Returns 7 char alphanumeric id'] = /^[a-z0-9]{7}$/i.test(imageHash1);",
									"tests['Returns 15 char alhpanumeric deletehash'] = /^[a-z0-9]{15}$/i.test(imageDeleteHash);",
									"",
									"postman.setEnvironmentVariable('imageHash1', imageHash1);",
									"postman.setEnvironmentVariable('imageDeleteHash', imageDeleteHash);",
									"",
									"//postman.setNextRequest('Account Images'); // Account -> Account Images",
									"",
									"//postman.setEnvironmentVariable('imageToDelete', id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
									"description": "*required* A binary file, base64 data, or a URL for an image. (up to 10MB)",
									"type": "text"
								},
								{
									"key": "album",
									"value": "{{albumHash}}",
									"description": "[optional] The album",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "1x1 Pixel",
									"type": "text",
									"disabled": true
								},
								{
									"key": "description",
									"value": "This is an 1x1 pixel image.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "name",
									"value": "pixel.gif",
									"type": "text",
									"disabled": true
								},
								{
									"key": "type",
									"value": "gif",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/image",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image"
							]
						},
						"description": "Upload a new image.\n\n#### Parameters\n\n| Key         | Required | Description                                                                                                                            |\n|-------------|----------|----------------------------------------------------------------------------------------------------------------------------------------|\n| image       | required | A binary file, base64 data, or a URL for an image. (up to 10MB)                                                                        |\n| album       | optional | The id of the album you want to add the image to. For anonymous albums, `album` should be the deletehash that is returned at creation. |\n| type        | optional | The type of the file that's being sent; `file`, `base64` or `URL`                                                                            |\n| name        | optional | The name of the file, this is automatically detected if uploading a file with a POST and multipart / form-data                         |\n| title       | optional | The title of the image.                                                                                                                |\n| description | optional | The description of the image.                                                                                                          |"
					},
					"response": [
						{
							"name": "Sample Anonymous Upload",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"value": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
											"type": "text"
										},
										{
											"key": "album",
											"value": "{{albumHash}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "title",
											"value": "1x1 Pixel",
											"type": "text",
											"disabled": true
										},
										{
											"key": "description",
											"value": "This is an 1x1 pixel image.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "name",
											"value": "pixel.gif",
											"type": "text",
											"disabled": true
										},
										{
											"key": "type",
											"value": "gif",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://api.imgur.com/3/image",
									"protocol": "https",
									"host": [
										"api",
										"imgur",
										"com"
									],
									"path": [
										"3",
										"image"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, SESSIONCOUNT, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Tue, 23 May 2017 16:28:10 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"f8e9f040e2b6ba2ebf5c836309b5cb50cf4b7368\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Expires",
									"value": "Thu, 19 Nov 1981 08:52:00 GMT",
									"name": "Expires",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"name": "Pragma",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Limit",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Limit",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Remaining",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Remaining",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Reset",
									"value": "-2",
									"name": "X-Post-Rate-Limit-Reset",
									"description": ""
								},
								{
									"key": "X-origin-ip",
									"value": "172.16.2.228",
									"name": "X-origin-ip",
									"description": ""
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "259f1853850b21cb4df8bc5bd15b7884",
									"key": "IMGURSESSION"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "1",
									"key": "_nc"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "upload.i-054973f4f04ffec62.production",
									"key": "UPSERVERID"
								}
							],
							"body": "{\n  \"data\": {\n    \"id\": \"orunSTu\",\n    \"title\": null,\n    \"description\": null,\n    \"datetime\": 1495556889,\n    \"type\": \"image/gif\",\n    \"animated\": false,\n    \"width\": 1,\n    \"height\": 1,\n    \"size\": 42,\n    \"views\": 0,\n    \"bandwidth\": 0,\n    \"vote\": null,\n    \"favorite\": false,\n    \"nsfw\": null,\n    \"section\": null,\n    \"account_url\": null,\n    \"account_id\": 0,\n    \"is_ad\": false,\n    \"in_most_viral\": false,\n    \"tags\": [],\n    \"ad_type\": 0,\n    \"ad_url\": \"\",\n    \"in_gallery\": false,\n    \"deletehash\": \"x70po4w7BVvSUzZ\",\n    \"name\": \"\",\n    \"link\": \"http://i.imgur.com/orunSTu.gif\"\n  },\n  \"success\": true,\n  \"status\": 200\n}"
						}
					]
				},
				{
					"name": "Image info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = JSON.parse(responseBody);\r",
									"\r",
									"tests['Status code is 200'] = (responseCode.code === 200);\r",
									"tests['Image info received'] = res.success === true && res.status === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}"
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/image/{{imageHash1}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image",
								"{{imageHash1}}"
							]
						},
						"description": "Get information about an image."
					},
					"response": []
				},
				{
					"name": "Update Image Information (Authed) sample",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = JSON.parse(responseBody);\r",
									"\r",
									"tests['Status code is 200'] = (responseCode.code === 200);\r",
									"tests['Album deletion was successful'] = res.success === true && res.data === true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Heart",
									"type": "text"
								},
								{
									"key": "description",
									"value": "This is an image of a heart outline.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/image/{{imageHash1}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image",
								"{{imageHash1}}"
							]
						},
						"description": "Updates the title or description of an image.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)\n\n#### Parameters\n\n| Key         | Required | Description                   |\n|-------------|----------|-------------------------------|\n| title       | optional | The title of the image.       |\n| description | optional | The description of the image. |"
					},
					"response": []
				},
				{
					"name": "Image Deletion (Un-Authed) (upload1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = JSON.parse(responseBody);",
									"",
									"tests[\"Successful delete\"] = res.success === true && res.success ===true;",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids",
									"value": "{{imageHash1}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/image/{{imageDeleteHash}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image",
								"{{imageDeleteHash}}"
							]
						},
						"description": "Deletes an image.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				},
				{
					"name": "Image Upload 2_url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"//postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var imageHashUrl = res.data.id;",
									"var imageDeleteHashUrl = res.data.deletehash;",
									"tests['Returns 7 char alphanumeric id'] = /^[a-z0-9]{7}$/i.test(imageHashUrl);",
									"tests['Returns 15 char alhpanumeric deletehash'] = /^[a-z0-9]{15}$/i.test(imageDeleteHashUrl);",
									"",
									"postman.setEnvironmentVariable('imageHashUrl', imageHashUrl);",
									"postman.setEnvironmentVariable('imageDeleteHashUrl', imageDeleteHashUrl);",
									"",
									"//postman.setNextRequest('Account Images'); // Account -> Account Images"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "https://mir-s3-cdn-cf.behance.net/project_modules/disp/0c120d26942581.5604f7b2c2fd9.jpg",
									"description": "*required* A binary file, base64 data, or a URL for an image. (up to 10MB)",
									"type": "text"
								},
								{
									"key": "album",
									"value": "{{albumHash}}",
									"description": "[optional] The album",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "1x1 Pixel",
									"type": "text",
									"disabled": true
								},
								{
									"key": "description",
									"value": "This is an 1x1 pixel image.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "name",
									"value": "pixel.gif",
									"type": "text",
									"disabled": true
								},
								{
									"key": "type",
									"value": "gif",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/image",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image"
							]
						},
						"description": "Upload a new image.\n\n#### Parameters\n\n| Key         | Required | Description                                                                                                                            |\n|-------------|----------|----------------------------------------------------------------------------------------------------------------------------------------|\n| image       | required | A binary file, base64 data, or a URL for an image. (up to 10MB)                                                                        |\n| album       | optional | The id of the album you want to add the image to. For anonymous albums, `album` should be the deletehash that is returned at creation. |\n| type        | optional | The type of the file that's being sent; `file`, `base64` or `URL`                                                                            |\n| name        | optional | The name of the file, this is automatically detected if uploading a file with a POST and multipart / form-data                         |\n| title       | optional | The title of the image.                                                                                                                |\n| description | optional | The description of the image.                                                                                                          |"
					},
					"response": [
						{
							"name": "Sample Anonymous Upload",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"value": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
											"type": "text"
										},
										{
											"key": "album",
											"value": "{{albumHash}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "title",
											"value": "1x1 Pixel",
											"type": "text",
											"disabled": true
										},
										{
											"key": "description",
											"value": "This is an 1x1 pixel image.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "name",
											"value": "pixel.gif",
											"type": "text",
											"disabled": true
										},
										{
											"key": "type",
											"value": "gif",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://api.imgur.com/3/image",
									"protocol": "https",
									"host": [
										"api",
										"imgur",
										"com"
									],
									"path": [
										"3",
										"image"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, SESSIONCOUNT, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Tue, 23 May 2017 16:28:10 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"f8e9f040e2b6ba2ebf5c836309b5cb50cf4b7368\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Expires",
									"value": "Thu, 19 Nov 1981 08:52:00 GMT",
									"name": "Expires",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"name": "Pragma",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Limit",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Limit",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Remaining",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Remaining",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Reset",
									"value": "-2",
									"name": "X-Post-Rate-Limit-Reset",
									"description": ""
								},
								{
									"key": "X-origin-ip",
									"value": "172.16.2.228",
									"name": "X-origin-ip",
									"description": ""
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "259f1853850b21cb4df8bc5bd15b7884",
									"key": "IMGURSESSION"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "1",
									"key": "_nc"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "upload.i-054973f4f04ffec62.production",
									"key": "UPSERVERID"
								}
							],
							"body": "{\n  \"data\": {\n    \"id\": \"orunSTu\",\n    \"title\": null,\n    \"description\": null,\n    \"datetime\": 1495556889,\n    \"type\": \"image/gif\",\n    \"animated\": false,\n    \"width\": 1,\n    \"height\": 1,\n    \"size\": 42,\n    \"views\": 0,\n    \"bandwidth\": 0,\n    \"vote\": null,\n    \"favorite\": false,\n    \"nsfw\": null,\n    \"section\": null,\n    \"account_url\": null,\n    \"account_id\": 0,\n    \"is_ad\": false,\n    \"in_most_viral\": false,\n    \"tags\": [],\n    \"ad_type\": 0,\n    \"ad_url\": \"\",\n    \"in_gallery\": false,\n    \"deletehash\": \"x70po4w7BVvSUzZ\",\n    \"name\": \"\",\n    \"link\": \"http://i.imgur.com/orunSTu.gif\"\n  },\n  \"success\": true,\n  \"status\": 200\n}"
						}
					]
				},
				{
					"name": "Image Deletion (Authed) (upload2)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Image deletion was successful'] = res.success === true && res.data === true;",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids",
									"value": "{{imageHashUrl}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/image/{{imageHashUrl}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image",
								"{{imageHashUrl}}"
							]
						},
						"description": "Deletes an image.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				},
				{
					"name": "Image Upload 3_base_64_my_screen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"var imageHashBase64 = res.data.id;",
									"var imageDeleteHashBase64 = res.data.deletehash;",
									"tests['Returns 7 char alphanumeric id'] = /^[a-z0-9]{7}$/i.test(imageHashBase64);",
									"tests['Returns 15 char alhpanumeric deletehash'] = /^[a-z0-9]{15}$/i.test(imageDeleteHashBase64);",
									"",
									"postman.setEnvironmentVariable('imageHashBase64', imageHashBase64);",
									"postman.setEnvironmentVariable('imageDeleteHashBase64', imageDeleteHashBase64);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "image",
									"value": "",
									"description": "*required* A binary file, base64 data, or a URL for an image. (up to 10MB)",
									"type": "text"
								},
								{
									"key": "album",
									"value": "{{albumHash}}",
									"description": "[optional] The album",
									"type": "text",
									"disabled": true
								},
								{
									"key": "title",
									"value": "1x1 Pixel",
									"type": "text",
									"disabled": true
								},
								{
									"key": "description",
									"value": "This is an 1x1 pixel image.",
									"type": "text",
									"disabled": true
								},
								{
									"key": "name",
									"value": "pixel.gif",
									"type": "text",
									"disabled": true
								},
								{
									"key": "type",
									"value": "gif",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/image",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image"
							]
						},
						"description": "Upload a new image.\n\n#### Parameters\n\n| Key         | Required | Description                                                                                                                            |\n|-------------|----------|----------------------------------------------------------------------------------------------------------------------------------------|\n| image       | required | A binary file, base64 data, or a URL for an image. (up to 10MB)                                                                        |\n| album       | optional | The id of the album you want to add the image to. For anonymous albums, `album` should be the deletehash that is returned at creation. |\n| type        | optional | The type of the file that's being sent; `file`, `base64` or `URL`                                                                            |\n| name        | optional | The name of the file, this is automatically detected if uploading a file with a POST and multipart / form-data                         |\n| title       | optional | The title of the image.                                                                                                                |\n| description | optional | The description of the image.                                                                                                          |"
					},
					"response": [
						{
							"name": "Sample Anonymous Upload",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Client-ID {{clientId}}"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{accessToken}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"value": "R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7",
											"type": "text"
										},
										{
											"key": "album",
											"value": "{{albumHash}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "title",
											"value": "1x1 Pixel",
											"type": "text",
											"disabled": true
										},
										{
											"key": "description",
											"value": "This is an 1x1 pixel image.",
											"type": "text",
											"disabled": true
										},
										{
											"key": "name",
											"value": "pixel.gif",
											"type": "text",
											"disabled": true
										},
										{
											"key": "type",
											"value": "gif",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "https://api.imgur.com/3/image",
									"protocol": "https",
									"host": [
										"api",
										"imgur",
										"com"
									],
									"path": [
										"3",
										"image"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Access-Control-Allow-Headers",
									"value": "Authorization, Content-Type, Accept, X-Mashape-Authorization, IMGURPLATFORM, IMGURUIDJAFO, SESSIONCOUNT, IMGURMWBETA, IMGURMWBETAOPTIN",
									"name": "Access-Control-Allow-Headers",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Methods",
									"value": "GET, PUT, POST, DELETE, OPTIONS",
									"name": "Access-Control-Allow-Methods",
									"description": ""
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*",
									"name": "Access-Control-Allow-Origin",
									"description": ""
								},
								{
									"key": "Access-Control-Expose-Headers",
									"value": "X-RateLimit-ClientLimit, X-RateLimit-ClientRemaining, X-RateLimit-UserLimit, X-RateLimit-UserRemaining, X-RateLimit-UserReset",
									"name": "Access-Control-Expose-Headers",
									"description": ""
								},
								{
									"key": "Cache-Control",
									"value": "no-store, no-cache, must-revalidate, post-check=0, pre-check=0",
									"name": "Cache-Control",
									"description": ""
								},
								{
									"key": "Connection",
									"value": "close",
									"name": "Connection",
									"description": ""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip",
									"name": "Content-Encoding",
									"description": ""
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": ""
								},
								{
									"key": "Date",
									"value": "Tue, 23 May 2017 16:28:10 GMT",
									"name": "Date",
									"description": ""
								},
								{
									"key": "ETag",
									"value": "W/\"f8e9f040e2b6ba2ebf5c836309b5cb50cf4b7368\"",
									"name": "ETag",
									"description": ""
								},
								{
									"key": "Expires",
									"value": "Thu, 19 Nov 1981 08:52:00 GMT",
									"name": "Expires",
									"description": ""
								},
								{
									"key": "Pragma",
									"value": "no-cache",
									"name": "Pragma",
									"description": ""
								},
								{
									"key": "Server",
									"value": "nginx",
									"name": "Server",
									"description": ""
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked",
									"name": "Transfer-Encoding",
									"description": ""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding",
									"name": "Vary",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Limit",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Limit",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Remaining",
									"value": "1250",
									"name": "X-Post-Rate-Limit-Remaining",
									"description": ""
								},
								{
									"key": "X-Post-Rate-Limit-Reset",
									"value": "-2",
									"name": "X-Post-Rate-Limit-Reset",
									"description": ""
								},
								{
									"key": "X-origin-ip",
									"value": "172.16.2.228",
									"name": "X-origin-ip",
									"description": ""
								}
							],
							"cookie": [
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "259f1853850b21cb4df8bc5bd15b7884",
									"key": "IMGURSESSION"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": true,
									"domain": "imgur.com",
									"path": "/",
									"secure": false,
									"value": "1",
									"key": "_nc"
								},
								{
									"expires": "Invalid Date",
									"httpOnly": false,
									"domain": "api.imgur.com",
									"path": "/",
									"secure": false,
									"value": "upload.i-054973f4f04ffec62.production",
									"key": "UPSERVERID"
								}
							],
							"body": "{\n  \"data\": {\n    \"id\": \"orunSTu\",\n    \"title\": null,\n    \"description\": null,\n    \"datetime\": 1495556889,\n    \"type\": \"image/gif\",\n    \"animated\": false,\n    \"width\": 1,\n    \"height\": 1,\n    \"size\": 42,\n    \"views\": 0,\n    \"bandwidth\": 0,\n    \"vote\": null,\n    \"favorite\": false,\n    \"nsfw\": null,\n    \"section\": null,\n    \"account_url\": null,\n    \"account_id\": 0,\n    \"is_ad\": false,\n    \"in_most_viral\": false,\n    \"tags\": [],\n    \"ad_type\": 0,\n    \"ad_url\": \"\",\n    \"in_gallery\": false,\n    \"deletehash\": \"x70po4w7BVvSUzZ\",\n    \"name\": \"\",\n    \"link\": \"http://i.imgur.com/orunSTu.gif\"\n  },\n  \"success\": true,\n  \"status\": 200\n}"
						}
					]
				},
				{
					"name": "Favorite an Image (3upload)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res = JSON.parse(responseBody);\r",
									"\r",
									"tests['Status code is 200'] = (responseCode.code === 200);\r",
									"\r",
									"tests['Set favorite was successful'] = res.success === true && res.status === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/image/{{imageHash3}}/favorite",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image",
								"{{imageHash3}}",
								"favorite"
							]
						},
						"description": "Favorite an image with the given ID. The user is required to be logged in to favorite the image.\n\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				},
				{
					"name": "Image Deletion (Authed) (upload3) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This endpoint is critical to the test flow, ",
									"// so this stops the request cycle if any of these tests error.",
									"//postman.setNextRequest('end');",
									"",
									"var res = JSON.parse(responseBody);",
									"",
									"tests['Status code is 200'] = (responseCode.code === 200);",
									"tests['Image deletion was successful'] = res.success === true && res.data === true;",
									"",
									"//postman.setNextRequest('end'); // stop running tests by setting next request to an invalid name / id"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids",
									"value": "{{imageHashBase64}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api.imgur.com/3/image/{{imageHashBase64}}",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"image",
								"{{imageHashBase64}}"
							]
						},
						"description": "Deletes an image.\n\n#### Response Model: [Basic](https://api.imgur.com/models/basic)"
					},
					"response": []
				},
				{
					"name": "Album Images (Check content of album)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"albumHash\", \"q1H7dp0\");\r",
									"\r",
									"//\"hVB4ybz\"\r",
									"//\"q1H7dp0\",\r",
									"//\"MiOyZfK\",\r",
									"//\"Hpjo09G\","
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Client-ID {{clientId}}"
							}
						],
						"url": {
							"raw": "https://api.imgur.com/3/album/{{albumHash}}/images",
							"protocol": "https",
							"host": [
								"api",
								"imgur",
								"com"
							],
							"path": [
								"3",
								"album",
								"{{albumHash}}",
								"images"
							]
						},
						"description": "Return all of the images in the album.\n\n#### Response Model: [Image](https://api.imgur.com/models/image)"
					},
					"response": []
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "scope",
						"value": "",
						"type": "string"
					},
					{
						"key": "clientSecret",
						"value": "a543220c4991282d7764eaed80d207a80b78f0d5",
						"type": "string"
					},
					{
						"key": "clientId",
						"value": "3412b1895eff6a8",
						"type": "string"
					},
					{
						"key": "accessTokenUrl",
						"value": "https://api.imgur.com/oauth2/token",
						"type": "string"
					},
					{
						"key": "authUrl",
						"value": "https://api.imgur.com/oauth2/authorize",
						"type": "string"
					},
					{
						"key": "redirect_uri",
						"value": "https://www.getpostman.com/oauth2/callback",
						"type": "string"
					},
					{
						"key": "grant_type",
						"value": "authorization_code",
						"type": "string"
					},
					{
						"key": "tokenName",
						"value": "imgur_token_mz",
						"type": "string"
					},
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					},
					{
						"key": "client_authentication",
						"value": "header",
						"type": "string"
					},
					{
						"key": "useBrowser",
						"value": false,
						"type": "boolean"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "a543220c4991282d7764eaed80d207a80b78f0d5",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "3412b1895eff6a8",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://api.imgur.com/oauth2/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://api.imgur.com/oauth2/authorize",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.getpostman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "imgur_token_mz",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			},
			{
				"key": "useBrowser",
				"value": false,
				"type": "boolean"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}